# Logstash Configuration for Spatial Tag Platform
# Version: 8.0.0

# Global Settings
pipeline.workers: 8
pipeline.batch.size: 2500
pipeline.batch.delay: 25
queue.type: persisted
queue.max_bytes: 1gb

# Input Section
input {
  beats {
    port => 5044
    ssl => true
    ssl_certificate => "/etc/logstash/certs/logstash.crt"
    ssl_key => "/etc/logstash/certs/logstash.key"
    ssl_verify_mode => "force_peer"
  }

  tcp {
    port => 5000
    codec => json_lines
    ssl_enable => true
    ssl_cert => "/etc/logstash/certs/logstash.crt"
    ssl_key => "/etc/logstash/certs/logstash.key"
  }

  http {
    port => 8080
    codec => json_lines
    ssl => true
    ssl_certificate => "/etc/logstash/certs/logstash.crt"
    ssl_key => "/etc/logstash/certs/logstash.key"
  }
}

# Filter Section
filter {
  # Service-specific Grok Patterns
  if [service] == "api_gateway" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{DATA:service} %{IP:client_ip} %{WORD:http_method} %{URIPATHPARAM:request_path} %{NUMBER:response_time:float}ms %{NUMBER:status_code:int} %{GREEDYDATA:message}" }
      tag_on_failure => ["_grokparsefailure_api_gateway"]
    }
  }

  if [service] == "spatial_engine" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{DATA:service} %{DATA:operation} lat=%{NUMBER:latitude:float} lon=%{NUMBER:longitude:float} radius=%{NUMBER:scan_radius:float}m users=%{NUMBER:users_detected:int} %{GREEDYDATA:message}" }
      tag_on_failure => ["_grokparsefailure_spatial_engine"]
    }
  }

  if [service] == "tag_service" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{DATA:service} tag_id=%{DATA:tag_id} action=%{WORD:action} location=\"%{DATA:location}\" expiry=%{DATA:expiry} %{GREEDYDATA:message}" }
      tag_on_failure => ["_grokparsefailure_tag_service"]
    }
  }

  if [service] == "user_service" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{DATA:service} user_id=%{DATA:user_id} action=%{WORD:action} status=%{WORD:status} %{GREEDYDATA:message}" }
      tag_on_failure => ["_grokparsefailure_user_service"]
    }
  }

  if [service] == "commerce_service" {
    grok {
      match => { "message" => "%{TIMESTAMP_ISO8601:timestamp} %{LOGLEVEL:level} %{DATA:service} transaction_id=%{DATA:transaction_id} amount=%{NUMBER:amount:float} status=%{WORD:status} %{GREEDYDATA:message}" }
      tag_on_failure => ["_grokparsefailure_commerce_service"]
    }
  }

  # Field Mutations and Enrichment
  mutate {
    add_field => {
      "environment" => "${ENV:production}"
      "app" => "spatial-tag"
      "version" => "${APP_VERSION}"
      "datacenter" => "${DC_LOCATION}"
      "[host_metrics][cpu_usage]" => "${CPU_USAGE}"
      "[host_metrics][memory_usage]" => "${MEMORY_USAGE}"
      "[host_metrics][disk_usage]" => "${DISK_USAGE}"
    }
    
    convert => {
      "response_time" => "float"
      "status_code" => "integer"
      "latitude" => "float"
      "longitude" => "float"
      "scan_radius" => "float"
      "users_detected" => "integer"
      "amount" => "float"
    }
  }

  # Timestamp Normalization
  date {
    match => [ "timestamp", "ISO8601" ]
    target => "@timestamp"
    timezone => "UTC"
  }

  # Remove Raw Message After Processing
  if "_grokparsefailure" not in [tags] {
    mutate {
      remove_field => [ "message" ]
    }
  }
}

# Output Section
output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    user => "${ELASTICSEARCH_USERNAME}"
    password => "${ELASTICSEARCH_PASSWORD}"
    index => "spatial-tag-%{+YYYY.MM.dd}"
    template_name => "spatial-tag"
    template_overwrite => true
    
    # SSL Configuration
    ssl => true
    ssl_certificate_verification => true
    cacert => "/etc/logstash/certs/ca.crt"
    
    # Bulk Operation Settings
    bulk_max_size => 5000
    bulk_max_events => 50000
    retry_max_items => 10000
    retry_max_interval => "30s"
    
    # Index Lifecycle Management
    ilm_enabled => true
    ilm_pattern => "spatial-tag-{now/d}-000001"
    ilm_policy => "spatial-tag-policy"
  }
}